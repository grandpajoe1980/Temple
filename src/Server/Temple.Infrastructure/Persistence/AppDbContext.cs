using Microsoft.EntityFrameworkCore;
using Temple.Domain.Tenants;
using Temple.Domain.Users;
using Temple.Domain.Content;
using Temple.Domain.Scheduling;
using Temple.Domain.Taxonomy;
using Temple.Domain.Terminology;
using Temple.Domain.Audit;
using Temple.Domain.Chat;
using Temple.Domain.Donations;
using Temple.Domain.Notifications;
using Temple.Domain.Identity;
using Temple.Domain.Automation;
using Temple.Domain.Configuration;
using Temple.Domain.People;
using Temple.Domain.Groups;
using Temple.Domain.Worship;
using Temple.Domain.Volunteers;
using Temple.Domain.Stewardship;
using Temple.Domain.Finance;

namespace Temple.Infrastructure.Persistence;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) {}

    public DbSet<Tenant> Tenants => Set<Tenant>();
    public DbSet<User> Users => Set<User>();
    public DbSet<Lesson> Lessons => Set<Lesson>();
    public DbSet<ScheduleEvent> ScheduleEvents => Set<ScheduleEvent>();
    public DbSet<TenantUser> TenantUsers => Set<TenantUser>();
    public DbSet<ReligionTaxonomy> ReligionTaxonomies => Set<ReligionTaxonomy>();
    public DbSet<TerminologyOverride> TerminologyOverrides => Set<TerminologyOverride>();
    public DbSet<RefreshToken> RefreshTokens => Set<RefreshToken>();
    public DbSet<DailyContent> DailyContents => Set<DailyContent>();
    public DbSet<AuditEvent> AuditEvents => Set<AuditEvent>();
    public DbSet<ChatChannel> ChatChannels => Set<ChatChannel>();
    public DbSet<ChatMessage> ChatMessages => Set<ChatMessage>();
    public DbSet<ChatChannelMember> ChatChannelMembers => Set<ChatChannelMember>();
    public DbSet<ChatPresence> ChatPresences => Set<ChatPresence>();
    public DbSet<Donation> Donations => Set<Donation>();
    public DbSet<Notification> Notifications => Set<Notification>();
    public DbSet<NotificationPreference> NotificationPreferences => Set<NotificationPreference>();
    public DbSet<NotificationUserState> NotificationUserStates => Set<NotificationUserState>();
    public DbSet<RoleVersion> RoleVersions => Set<RoleVersion>();
    public DbSet<AutomationRule> AutomationRules => Set<AutomationRule>();
    public DbSet<LessonAutomationState> LessonAutomationStates => Set<LessonAutomationState>();
    public DbSet<EventReminder> EventReminders => Set<EventReminder>();
    public DbSet<MediaAsset> MediaAssets => Set<MediaAsset>();
    public DbSet<LessonMedia> LessonMedia => Set<LessonMedia>();
    public DbSet<EventMedia> EventMedia => Set<EventMedia>();
    public DbSet<GlobalSetting> GlobalSettings => Set<GlobalSetting>();
    public DbSet<CustomRole> CustomRoles => Set<CustomRole>();
    public DbSet<Person> People => Set<Person>();
    public DbSet<Household> Households => Set<Household>();
    public DbSet<HouseholdMember> HouseholdMembers => Set<HouseholdMember>();
    public DbSet<AttendanceRecord> AttendanceRecords => Set<AttendanceRecord>();
    public DbSet<PastoralCareNote> PastoralCareNotes => Set<PastoralCareNote>();
    public DbSet<PrayerRequest> PrayerRequests => Set<PrayerRequest>();
    public DbSet<Milestone> Milestones => Set<Milestone>();
    public DbSet<Group> Groups => Set<Group>();
    public DbSet<GroupMember> GroupMembers => Set<GroupMember>();
    public DbSet<GroupMeeting> GroupMeetings => Set<GroupMeeting>();
    public DbSet<GroupMeetingAttendance> GroupMeetingAttendances => Set<GroupMeetingAttendance>();
    public DbSet<Song> Songs => Set<Song>();
    public DbSet<ServicePlan> ServicePlans => Set<ServicePlan>();
    public DbSet<ServicePlanItem> ServicePlanItems => Set<ServicePlanItem>();
    public DbSet<SetList> SetLists => Set<SetList>();
    public DbSet<SetListSong> SetListSongs => Set<SetListSong>();
    public DbSet<VolunteerPosition> VolunteerPositions => Set<VolunteerPosition>();
    public DbSet<VolunteerAssignment> VolunteerAssignments => Set<VolunteerAssignment>();
    public DbSet<VolunteerAvailability> VolunteerAvailabilities => Set<VolunteerAvailability>();
    public DbSet<VolunteerBackgroundCheck> VolunteerBackgroundChecks => Set<VolunteerBackgroundCheck>();
    public DbSet<StewardshipCampaign> StewardshipCampaigns => Set<StewardshipCampaign>();
    public DbSet<StewardshipCampaignPledge> StewardshipCampaignPledges => Set<StewardshipCampaignPledge>();
    public DbSet<StewardshipFund> StewardshipFunds => Set<StewardshipFund>();
    public DbSet<NonCashGift> NonCashGifts => Set<NonCashGift>();
    public DbSet<StewardshipFundLedgerEntry> StewardshipFundLedgerEntries => Set<StewardshipFundLedgerEntry>();
    public DbSet<FinanceGoal> FinanceGoals => Set<FinanceGoal>();
    public DbSet<BudgetCategory> BudgetCategories => Set<BudgetCategory>();
    public DbSet<Expense> Expenses => Set<Expense>();
    public DbSet<RecurringCommitment> RecurringCommitments => Set<RecurringCommitment>();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.ApplyConfigurationsFromAssembly(typeof(AppDbContext).Assembly);
        modelBuilder.Entity<TenantUser>().HasKey(tu => new { tu.TenantId, tu.UserId });
        modelBuilder.Entity<ReligionTaxonomy>().HasKey(rt => rt.Id);
        modelBuilder.Entity<ReligionTaxonomy>()
            .Property(r => r.CanonicalTexts)
            .HasColumnType("text[]");
        modelBuilder.Entity<RefreshToken>().HasIndex(r => r.Token).IsUnique();
        modelBuilder.Entity<DailyContent>().HasIndex(d => new { d.TaxonomyId, d.Active });
    modelBuilder.Entity<ChatChannel>().HasIndex(c => new { c.TenantId, c.Key }).IsUnique();
    modelBuilder.Entity<ChatMessage>().HasIndex(m => new { m.TenantId, m.ChannelId, m.CreatedUtc });
    modelBuilder.Entity<ChatChannelMember>().HasIndex(m => new { m.TenantId, m.ChannelId, m.UserId }).IsUnique();
    modelBuilder.Entity<ChatPresence>().HasIndex(p => new { p.TenantId, p.UserId, p.ConnectionId }).IsUnique();
    modelBuilder.Entity<Donation>().HasIndex(d => new { d.TenantId, d.CreatedUtc });
    modelBuilder.Entity<Notification>().HasIndex(n => new { n.TenantId, n.CreatedUtc });
    modelBuilder.Entity<Notification>().HasIndex(n => new { n.TenantId, n.Status, n.CreatedUtc });
    modelBuilder.Entity<NotificationPreference>().HasIndex(p => new { p.TenantId, p.UserId, p.Channel }).IsUnique();
    modelBuilder.Entity<NotificationUserState>().HasIndex(s => new { s.TenantId, s.NotificationId, s.UserId }).IsUnique();
    modelBuilder.Entity<RoleVersion>().HasIndex(r => new { r.TenantId, r.Version }).IsUnique();
    modelBuilder.Entity<AutomationRule>().HasIndex(a => new { a.TenantId, a.TriggerType, a.Enabled });
    modelBuilder.Entity<LessonAutomationState>().HasIndex(s => s.TenantId).IsUnique();
    modelBuilder.Entity<EventReminder>().HasIndex(r => new { r.TenantId, r.EventId, r.ScheduledUtc });
    modelBuilder.Entity<MediaAsset>().HasIndex(m => new { m.TenantId, m.CreatedUtc });
    modelBuilder.Entity<LessonMedia>().HasIndex(l => new { l.TenantId, l.LessonId, l.SortOrder });
    modelBuilder.Entity<EventMedia>().HasIndex(e => new { e.TenantId, e.ScheduleEventId, e.SortOrder });
    modelBuilder.Entity<GlobalSetting>().HasIndex(g => g.Key).IsUnique();
    modelBuilder.Entity<CustomRole>().HasIndex(r => new { r.TenantId, r.Key }).IsUnique();
    modelBuilder.Entity<Person>().HasIndex(p => new { p.TenantId, p.Email });
    modelBuilder.Entity<Household>().HasIndex(h => new { h.TenantId, h.Name });
    modelBuilder.Entity<HouseholdMember>().HasIndex(m => new { m.TenantId, m.HouseholdId, m.PersonId }).IsUnique();
    modelBuilder.Entity<Group>().HasIndex(g => new { g.TenantId, g.Name });
    modelBuilder.Entity<GroupMember>().HasIndex(m => new { m.TenantId, m.GroupId, m.PersonId }).IsUnique();
    modelBuilder.Entity<GroupMeeting>().HasIndex(m => new { m.TenantId, m.GroupId, m.StartUtc });
    modelBuilder.Entity<GroupMeetingAttendance>().HasIndex(a => new { a.TenantId, a.MeetingId, a.PersonId }).IsUnique();
    modelBuilder.Entity<Song>().HasIndex(s => new { s.TenantId, s.Title });
    modelBuilder.Entity<ServicePlan>().HasIndex(p => new { p.TenantId, p.ServiceDateUtc });
    modelBuilder.Entity<ServicePlanItem>().HasIndex(i => new { i.TenantId, i.ServicePlanId, i.Order }).IsUnique();
    modelBuilder.Entity<SetList>().HasIndex(s => new { s.TenantId, s.Name });
    modelBuilder.Entity<SetListSong>().HasIndex(s => new { s.TenantId, s.SetListId, s.Order }).IsUnique();
    modelBuilder.Entity<VolunteerPosition>().HasIndex(p => new { p.TenantId, p.Name }).IsUnique();
    modelBuilder.Entity<VolunteerAssignment>().HasIndex(a => new { a.TenantId, a.PositionId, a.PersonId, a.StartUtc });
    modelBuilder.Entity<VolunteerAvailability>().HasIndex(a => new { a.TenantId, a.PersonId });
    modelBuilder.Entity<VolunteerBackgroundCheck>().HasIndex(b => new { b.TenantId, b.PersonId, b.Status });
    modelBuilder.Entity<StewardshipCampaign>().HasIndex(c => new { c.TenantId, c.Name }).IsUnique();
    modelBuilder.Entity<StewardshipCampaignPledge>().HasIndex(p => new { p.TenantId, p.CampaignId, p.PersonId }).IsUnique();
    modelBuilder.Entity<StewardshipFund>().HasIndex(f => new { f.TenantId, f.Name }).IsUnique();
    modelBuilder.Entity<NonCashGift>().HasIndex(g => new { g.TenantId, g.ReceivedUtc });
    modelBuilder.Entity<StewardshipFundLedgerEntry>().HasIndex(e => new { e.TenantId, e.FundId, e.CreatedUtc });
    modelBuilder.Entity<FinanceGoal>().HasIndex(g => new { g.TenantId, g.Key }).IsUnique();
    modelBuilder.Entity<BudgetCategory>().HasIndex(c => new { c.TenantId, c.Key }).IsUnique();
    modelBuilder.Entity<Expense>().HasIndex(e => new { e.TenantId, e.BudgetCategoryId, e.Status, e.SubmittedUtc });
    modelBuilder.Entity<Donation>().HasIndex(d => new { d.TenantId, d.FinanceGoalId });
    modelBuilder.Entity<Donation>().HasIndex(d => new { d.TenantId, d.StewardshipFundId });
    modelBuilder.Entity<RecurringCommitment>().HasIndex(r => new { r.TenantId, r.UserId, r.Active });
    modelBuilder.Entity<AttendanceRecord>().HasIndex(a => new { a.TenantId, a.PersonId, a.DateUtc });
    modelBuilder.Entity<PastoralCareNote>().HasIndex(n => new { n.TenantId, n.PersonId, n.CreatedUtc });
    modelBuilder.Entity<PrayerRequest>().HasIndex(p => new { p.TenantId, p.PersonId, p.CreatedUtc });
    modelBuilder.Entity<Milestone>().HasIndex(m => new { m.TenantId, m.PersonId, m.Type, m.DateUtc });
        base.OnModelCreating(modelBuilder);
    }
}
